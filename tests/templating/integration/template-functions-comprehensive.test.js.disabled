#!/usr/bin/env node

/**
 * Comprehensive Template Functions Integration Test
 * Consolidates execution and real job testing into a single comprehensive test
 */

import { TemplateFunctions } from '../../../build/services/template-functions.js';
import { JobTracker } from '../../../build/services/job-tracker.js';
import { KnowledgeIndexer } from '../../../build/services/knowledge-indexer.js';
import { AsyncQueryPoller } from '../../../build/services/async-query-poller.js';
import { DynamicResolver } from '../../../build/services/dynamic-resolver.js';

async function testTemplateFunctionsComprehensive() {
  console.log('üß™ Comprehensive Template Functions Integration Test\n');

  try {
    // Phase 1: Service Initialization
    console.log('üìã Phase 1: Service Initialization');
    console.log('===================================');
    const { jobTracker, knowledgeIndexer, asyncQueryPoller, templateFunctions, dynamicResolver } = await initializeServices();

    // Phase 2: Basic Function Testing
    console.log('\nüìã Phase 2: Basic Function Testing');
    console.log('===================================');
    await testBasicFunctions(templateFunctions, jobTracker);

    // Phase 3: Real Job Integration
    console.log('\nüìã Phase 3: Real Job Integration');
    console.log('=================================');
    await testRealJobIntegration(templateFunctions, dynamicResolver, jobTracker);

    // Phase 4: Knowledge Base Integration
    console.log('\nüìã Phase 4: Knowledge Base Integration');
    console.log('======================================');
    await testKnowledgeBaseIntegration(templateFunctions, dynamicResolver, knowledgeIndexer);

    // Phase 5: Dynamic Parameter Resolution
    console.log('\nüìã Phase 5: Dynamic Parameter Resolution');
    console.log('========================================');
    await testDynamicParameterResolution(dynamicResolver);

    // Phase 6: Field Path Utilities
    console.log('\nüìã Phase 6: Field Path Utilities');
    console.log('=================================');
    await testFieldPathUtilities();

    // Phase 7: Error Handling
    console.log('\nüìã Phase 7: Error Handling');
    console.log('===========================');
    await testErrorHandling(templateFunctions, dynamicResolver);

    console.log('\nüéâ Comprehensive Template Functions Test Complete!');
    console.log('\nüìã Summary:');
    console.log('   ‚úÖ Service initialization working');
    console.log('   ‚úÖ Basic template functions operational');
    console.log('   ‚úÖ Real job integration validated');
    console.log('   ‚úÖ Knowledge base integration tested');
    console.log('   ‚úÖ Dynamic parameter resolution working');
    console.log('   ‚úÖ Field path utilities functional');
    console.log('   ‚úÖ Error handling robust');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  }
}

async function initializeServices() {
  console.log('1. Initializing core services...');
  const jobTracker = new JobTracker();
  const knowledgeIndexer = new KnowledgeIndexer();
  const asyncQueryPoller = new AsyncQueryPoller(jobTracker);

  // Initialize knowledge indexer
  try {
    await knowledgeIndexer.initialize();
    console.log('‚úÖ KnowledgeIndexer initialized successfully');
  } catch (error) {
    console.log('‚ö†Ô∏è KnowledgeIndexer initialization failed (Qdrant may not be available):', error.message);
  }

  // Create dynamic resolution context
  const context = {
    jobTracker,
    knowledgeIndexer,
    asyncQueryPoller,
    templateContext: {
      toolName: 'test_template_functions_comprehensive',
      environment: 'test',
      userOverrides: {},
    },
  };

  const templateFunctions = new TemplateFunctions(context);
  const dynamicResolver = new DynamicResolver();
  dynamicResolver.setContext(context);

  console.log('‚úÖ All services initialized successfully');
  
  return { jobTracker, knowledgeIndexer, asyncQueryPoller, templateFunctions, dynamicResolver };
}

async function testBasicFunctions(templateFunctions, jobTracker) {
  console.log('1. Testing basic jobOutput() function...');
  
  // Add a test job to the tracker
  const testJobId = '897ac2fd-d113-4a35-a412-01cc59783042';
  jobTracker.addOrUpdateJob({
    jobId: testJobId,
    status: 'COMPLETED',
    toolName: 'submit_hive_query',
    projectId: 'dataproc-test-project',
    region: 'us-central1',
    clusterName: 'test-cluster',
    submissionTime: new Date().toISOString(),
  });

  // Test jobOutput function with different field paths
  const testCases = [
    { jobId: testJobId, fieldPath: 'status', description: 'Extract job status' },
    { jobId: testJobId, fieldPath: 'tables[0].rows[0]', description: 'Extract first row of first table' },
    { jobId: testJobId, fieldPath: 'tables', description: 'Extract all tables' },
  ];

  for (const testCase of testCases) {
    try {
      console.log(`   Testing: ${testCase.description}`);
      const result = await templateFunctions.jobOutput(testCase.jobId, testCase.fieldPath);
      console.log(`   ‚úÖ Result for '${testCase.fieldPath}':`, JSON.stringify(result, null, 2));
    } catch (error) {
      console.log(`   ‚ùå Error for '${testCase.fieldPath}':`, error.message);
      
      // For missing job results, this is expected behavior
      if (error.message.includes('No results found')) {
        console.log(`   ‚ÑπÔ∏è This is expected - job ${testCase.jobId} has no cached results`);
      }
    }
  }

  console.log('2. Testing context information...');
  const contextInfo = templateFunctions.getContextInfo();
  console.log('‚úÖ Context Info:', JSON.stringify(contextInfo, null, 2));
}

async function testRealJobIntegration(templateFunctions, dynamicResolver, jobTracker) {
  console.log('1. Setting up real job data...');
  
  const realJobId = '897ac2fd-d113-4a35-a412-01cc59783042';
  const mockJobResults = {
    status: 'COMPLETED',
    tables: [
      {
        schema: ['database_name', 'table_count', 'total_size_gb'],
        rows: [
          ['default', '15', '2.3'],
          ['analytics', '8', '1.7'],
          ['staging', '12', '0.9'],
        ],
      },
    ],
    metadata: {
      jobId: realJobId,
      duration: 1500,
      executionTime: '2025-06-06T18:45:00Z',
    },
  };

  // Add job to tracker with results
  jobTracker.addOrUpdateJob({
    jobId: realJobId,
    status: 'COMPLETED',
    toolName: 'submit_hive_query',
    projectId: 'dataproc-test-project',
    region: 'us-central1',
    clusterName: 'analytics-cluster',
    submissionTime: new Date().toISOString(),
    results: mockJobResults,
  });

  console.log(`‚úÖ Added job ${realJobId} with mock results`);

  console.log('2. Testing jobOutput() with real job data...');
  
  const jobOutputTests = [
    {
      template: `{{job_output('${realJobId}', 'status')}}`,
      description: 'Extract job status',
      expected: 'COMPLETED',
    },
    {
      template: `{{job_output('${realJobId}', 'tables[0].rows[0][0]')}}`,
      description: 'Extract first database name',
      expected: 'default',
    },
    {
      template: `{{job_output('${realJobId}', 'tables[0].rows')}}`,
      description: 'Extract all table rows',
      expected: 'array of rows',
    },
    {
      template: `{{job_output('${realJobId}', 'metadata.duration')}}`,
      description: 'Extract job duration',
      expected: 1500,
    },
  ];

  for (const test of jobOutputTests) {
    try {
      console.log(`   Testing: ${test.description}`);
      console.log(`   Template: ${test.template}`);
      
      // Parse and execute the template function
      const functionCalls = dynamicResolver.parseFunctionCalls(test.template);
      if (functionCalls.length > 0) {
        const result = await templateFunctions.jobOutput(
          functionCalls[0].args[0],
          functionCalls[0].args[1]
        );
        console.log(`   ‚úÖ Result:`, JSON.stringify(result, null, 2));
        console.log(`   Expected: ${test.expected}\n`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error:`, error.message);
      console.log(`   This may be expected if job results are not cached\n`);
    }
  }
}

async function testKnowledgeBaseIntegration(templateFunctions, dynamicResolver, knowledgeIndexer) {
  console.log('1. Indexing test cluster data...');
  
  // Index some test cluster data
  const testClusters = [
    {
      clusterName: 'ml-training-cluster',
      projectId: 'dataproc-test-project',
      region: 'us-central1',
      config: {
        softwareConfig: {
          properties: {
            'dataproc:pip.packages': 'tensorflow==2.8.0,pandas==1.3.0,scikit-learn==1.0.0',
          },
        },
        masterConfig: {
          machineTypeUri: 'projects/dataproc-test-project/zones/us-central1-a/machineTypes/n1-highmem-4',
        },
      },
    },
    {
      clusterName: 'analytics-cluster',
      projectId: 'dataproc-test-project',
      region: 'us-central1',
      config: {
        softwareConfig: {
          properties: {
            'dataproc:pip.packages': 'pandas==1.3.0,numpy==1.21.0,matplotlib==3.4.0',
          },
        },
        masterConfig: {
          machineTypeUri: 'projects/dataproc-test-project/zones/us-central1-a/machineTypes/n1-standard-4',
        },
      },
    },
  ];

  for (const cluster of testClusters) {
    try {
      await knowledgeIndexer.indexClusterConfiguration(cluster);
      console.log(`‚úÖ Indexed cluster: ${cluster.clusterName}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Failed to index ${cluster.clusterName}:`, error.message);
    }
  }

  console.log('2. Testing qdrantQuery() function...');
  
  // Test qdrant queries
  const qdrantTests = [
    {
      template: `{{qdrant_query('tensorflow machine learning', 'clusterName')}}`,
      description: 'Find ML clusters by TensorFlow',
    },
    {
      template: `{{qdrant_query('pandas data analysis', 'pipPackages')}}`,
      description: 'Find clusters with pandas',
    },
    {
      template: `{{qdrant_query('high memory configuration', 'machineType')}}`,
      description: 'Find high-memory clusters',
    },
  ];

  for (const test of qdrantTests) {
    try {
      console.log(`   Testing: ${test.description}`);
      console.log(`   Template: ${test.template}`);
      
      const functionCalls = dynamicResolver.parseFunctionCalls(test.template);
      if (functionCalls.length > 0) {
        const result = await templateFunctions.qdrantQuery(
          functionCalls[0].args[0],
          functionCalls[0].args[1]
        );
        console.log(`   ‚úÖ Result:`, JSON.stringify(result, null, 2));
      }
    } catch (error) {
      console.log(`   ‚ùå Error:`, error.message);
      if (error.message.includes('KnowledgeIndexer not available')) {
        console.log(`   ‚ÑπÔ∏è This is expected - Qdrant service may not be running`);
      }
    }
    console.log('');
  }

  // Test basic qdrantQuery function with different queries
  const queryTestCases = [
    { query: 'pip packages', field: 'packages', description: 'Find pip packages' },
    { query: 'machine learning', field: 'clusterName', description: 'Find ML clusters' },
    { query: 'tensorflow', field: 'pipPackages', description: 'Find TensorFlow usage' },
  ];

  for (const testCase of queryTestCases) {
    try {
      console.log(`   Testing: ${testCase.description}`);
      const result = await templateFunctions.qdrantQuery(testCase.query, testCase.field);
      console.log(`   ‚úÖ Result for '${testCase.query}' -> '${testCase.field}':`, JSON.stringify(result, null, 2));
    } catch (error) {
      console.log(`   ‚ùå Error for '${testCase.query}':`, error.message);
      
      // For Qdrant unavailable, this is expected
      if (error.message.includes('KnowledgeIndexer not available')) {
        console.log(`   ‚ÑπÔ∏è This is expected - Qdrant service may not be running`);
      }
    }
  }
}

async function testDynamicParameterResolution(dynamicResolver) {
  console.log('1. Testing complete dynamic parameter resolution...');
  
  const realJobId = '897ac2fd-d113-4a35-a412-01cc59783042';
  const templateParameters = {
    jobStatus: `{{job_output('${realJobId}', 'status')}}`,
    firstDatabase: `{{job_output('${realJobId}', 'tables[0].rows[0][0]')}}`,
    mlCluster: `{{qdrant_query('tensorflow', 'clusterName')}}`,
    mixedContent: `Job ${realJobId} status: {{job_output('${realJobId}', 'status')}}`,
  };

  try {
    const resolvedParameters = await dynamicResolver.resolveDynamicParameters(
      templateParameters,
      {
        toolName: 'test_dynamic_resolution',
        environment: 'test',
        userOverrides: {},
      }
    );
    
    console.log('‚úÖ Dynamic parameter resolution results:');
    for (const [key, value] of Object.entries(resolvedParameters)) {
      console.log(`   ${key}: ${JSON.stringify(value)}`);
    }
  } catch (error) {
    console.log('‚ùå Dynamic parameter resolution failed:', error.message);
    console.log('‚ÑπÔ∏è This may be expected if functions are not fully implemented');
  }
}

async function testFieldPathUtilities() {
  console.log('1. Testing field path utilities...');
  const { FieldPathUtils } = await import('../../../build/services/template-functions.js');
  
  const testObject = {
    status: 'COMPLETED',
    tables: [
      {
        rows: [
          ['col1_val1', 'col2_val1'],
          ['col1_val2', 'col2_val2'],
        ],
        schema: ['col1', 'col2'],
      },
    ],
    metadata: {
      jobId: '897ac2fd-d113-4a35-a412-01cc59783042',
      duration: 1500,
    },
  };

  console.log('Available field paths:');
  const availablePaths = FieldPathUtils.getAvailableFieldPaths(testObject);
  availablePaths.forEach(path => console.log(`   - ${path}`));

  // Test field path validation
  const validPaths = ['status', 'tables[0].rows[0]', 'metadata.jobId'];
  const invalidPaths = ['invalid..path', 'tables[abc]', ''];

  console.log('\nField path validation:');
  validPaths.forEach(path => {
    const isValid = FieldPathUtils.validateFieldPath(path);
    console.log(`   ‚úÖ '${path}': ${isValid ? 'VALID' : 'INVALID'}`);
  });

  invalidPaths.forEach(path => {
    const isValid = FieldPathUtils.validateFieldPath(path);
    console.log(`   ${isValid ? '‚úÖ' : '‚ùå'} '${path}': ${isValid ? 'VALID' : 'INVALID'}`);
  });
}

async function testErrorHandling(templateFunctions, dynamicResolver) {
  console.log('1. Testing error handling scenarios...');
  
  const realJobId = '897ac2fd-d113-4a35-a412-01cc59783042';
  const errorTests = [
    {
      description: 'Non-existent job ID',
      template: `{{job_output('non-existent-job', 'status')}}`,
    },
    {
      description: 'Invalid field path',
      template: `{{job_output('${realJobId}', 'invalid.field.path')}}`,
    },
    {
      description: 'Invalid function arguments',
      template: `{{job_output('${realJobId}')}}`, // Missing second argument
    },
  ];

  for (const test of errorTests) {
    try {
      console.log(`   Testing: ${test.description}`);
      const functionCalls = dynamicResolver.parseFunctionCalls(test.template);
      if (functionCalls.length > 0) {
        const result = await templateFunctions.jobOutput(
          functionCalls[0].args[0],
          functionCalls[0].args[1] || 'status'
        );
        console.log(`   ‚ö†Ô∏è Unexpected success:`, result);
      }
    } catch (error) {
      console.log(`   ‚úÖ Expected error:`, error.message);
    }
  }
}

// Run the test
testTemplateFunctionsComprehensive().catch(console.error);