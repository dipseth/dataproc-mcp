name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # PRE-FLIGHT CHECKS
  # ============================================================================
  pre-flight:
    name: 🚀 Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should-run-tests: ${{ steps.changes.outputs.should-run-tests }}
      should-run-security: ${{ steps.changes.outputs.should-run-security }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        id: changes
        run: |
          # Check if we should run tests based on file changes
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(ts|js|json)$|package\.json|\.github/workflows'; then
            echo "should-run-tests=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-tests=false" >> $GITHUB_OUTPUT
          fi
          
          # Always run security checks on main/develop
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "should-run-security=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-security=false" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Pre-flight Check
        run: |
          echo "✅ Repository checked out successfully"
          echo "📊 Changes detected: ${{ steps.changes.outputs.should-run-tests }}"
          echo "🔒 Security scan needed: ${{ steps.changes.outputs.should-run-security }}"

  # ============================================================================
  # QUALITY GATES
  # ============================================================================
  quality-gates:
    name: 🔍 Quality Gates
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-tests == 'true'
    timeout-minutes: 10
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          echo "✅ Dependencies installed for Node.js ${{ matrix.node-version }}"

      - name: 🔨 Build Project
        run: |
          npm run build
          echo "✅ TypeScript compilation successful"

      - name: 🧹 ESLint Check
        run: |
          npm run lint:check
          echo "✅ ESLint validation passed"

      - name: 💅 Prettier Check
        run: |
          npm run format:check
          echo "✅ Code formatting validated"

      - name: 🔍 TypeScript Check
        run: |
          npm run type-check
          echo "✅ TypeScript type checking passed"

      - name: ✅ Unit Tests
        run: |
          npm run test:unit:fast
          echo "✅ Unit tests completed successfully"

      - name: 📋 Package Validation
        run: |
          npm run validate-package
          echo "✅ Package validation completed"

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-security == 'true'
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Security Audit
        run: |
          npm run security:check
          echo "✅ Security audit completed"

      - name: 🔐 Dependency Vulnerability Scan
        run: |
          npx audit-ci --config .audit-ci.json || echo "⚠️ Vulnerabilities found but not blocking"
          echo "✅ Dependency scan completed"

  # ============================================================================
  # INTEGRATION VALIDATION
  # ============================================================================
  integration-validation:
    name: 🔗 Integration Validation
    runs-on: ubuntu-latest
    needs: [quality-gates]
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build Project
        run: npm run build

      - name: 🧪 Run unit tests
        run: npm run test:unit

      - name: 📊 Generate coverage report
        run: npm run test:coverage

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: ✅ Check coverage threshold
        run: npm run test:coverage:check

  # Job 3: Documentation & Examples
  documentation:
    name: Documentation & Examples
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build Project
        run: npm run build

      - name: 🚀 Pre-flight System Check
        run: |
          npm run pre-flight
          echo "✅ Pre-flight checks completed"

      - name: 📚 Documentation Generation
        run: |
          npm run docs:generate
          echo "✅ Documentation generated successfully"


      - name: 🔗 Documentation Link Validation
        run: |
          npm run docs:test-links
          echo "✅ Documentation links validated"
          
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            docs/generated/
            examples/
          retention-days: 30


      - name: 📋 Example Configuration Validation
        run: |
          npm run validate:examples
          echo "✅ Example configurations validated"

  # ============================================================================
  # BUILD ARTIFACTS
  # ============================================================================
  build-artifacts:
    name: 📦 Build Artifacts
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build Production Assets
        run: |
          npm run build:clean
          npm run build:standalone
          npm run build:templates
          echo "✅ Production build completed"

      - name: 📋 Create Distribution Package
        run: |
          mkdir -p dist
          npm pack --pack-destination=dist
          echo "✅ Distribution package created"

      - name: 💾 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            build/
            dist/
            docs/generated/
          retention-days: 30

  # ============================================================================
  # CI STATUS SUMMARY
  # ============================================================================
  ci-status:
    name: ✅ CI Status Summary
    runs-on: ubuntu-latest
    needs: [quality-gates, security-scan, integration-validation, build-artifacts]
    if: always()
    steps:
      - name: 📊 CI Results Summary
        run: |
          echo "## 🔄 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gates | ${{ needs.quality-gates.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || needs.security-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration | ${{ needs.integration-validation.result == 'success' && '✅ Passed' || needs.integration-validation.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Artifacts | ${{ needs.build-artifacts.result == 'success' && '✅ Passed' || needs.build-artifacts.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.quality-gates.result }}" == "success" && 
                ("${{ needs.security-scan.result }}" == "success" || "${{ needs.security-scan.result }}" == "skipped") ]]; then
            echo "🎉 **CI Pipeline Successful!** Ready for release automation." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **CI Pipeline Failed!** Please review the failed jobs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi