name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION_MATRIX: '[18, 20, 22]'
  COVERAGE_THRESHOLD: 90

jobs:
  # Job 1: Code Quality & Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: TypeScript type check
        run: npm run type-check

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: npm run security:check
        continue-on-error: true

  # Job 2: Build & Test Matrix
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        node-version: [18, 20, 22]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run unit tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

      - name: Generate coverage report
        run: npm run test:coverage
        if: matrix.node-version == '20'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Check coverage threshold
        run: npm run test:coverage:check
        if: matrix.node-version == '20'

  # Job 3: Documentation & Examples
  documentation:
    name: Documentation & Examples
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Generate documentation
        run: npm run docs:generate

      - name: Validate configuration examples
        run: npm run validate:examples

      - name: Test documentation links
        run: npm run docs:test-links
        continue-on-error: true

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            docs/generated/
            examples/
          retention-days: 30

  # Job 4: Package & Publish (only on release)
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [quality, test, documentation]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run final tests
        run: npm test

      - name: Update version from tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          npm version $TAG_VERSION --no-git-tag-version

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release assets
        run: |
          mkdir -p release-assets
          cp -r build/ release-assets/
          cp package.json release-assets/
          cp README.md release-assets/
          tar -czf release-assets/dataproc-mcp-server-${{ github.ref_name }}.tar.gz -C release-assets .

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release-assets/dataproc-mcp-server-${{ github.ref_name }}.tar.gz
          asset_name: dataproc-mcp-server-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

  # Job 5: Deployment Notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [publish]
    if: always() && github.event_name == 'release'
    
    steps:
      - name: Notify success
        if: needs.publish.result == 'success'
        run: |
          echo "‚úÖ Successfully published dataproc-mcp-server ${{ github.ref_name }}"
          echo "üì¶ Package available at: https://www.npmjs.com/package/@dataproc/mcp-server"

      - name: Notify failure
        if: needs.publish.result == 'failure'
        run: |
          echo "‚ùå Failed to publish dataproc-mcp-server ${{ github.ref_name }}"
          echo "üîç Check the logs for details"
          exit 1